    public void parseXML(XmlPullParser myparser) {
        Log.i("mytag", "hit");
        try {


            int event = myparser.getEventType();
            while (event != XmlPullParser.END_DOCUMENT) {
                switch (event) {
                    case XmlPullParser.START_TAG:
                        switch (myparser.getName().toLowerCase()){
                            case "rss":
                                // Do nothing
                                Log.i("tagLog", "rss");
                                break;
                            case "channel":
                                // Do nothing
                                scope = ParserScope.Channel;
                                Log.i("tagLog", "channel");
                                break;
                            case "item":
                                // create new instance of an item class
                                scope = ParserScope.Item;
                                // (make an item class)
                                Log.i("tagLog", "item");
                                break;
                            case "title":
                                String title = myparser.nextText();
                                //Checks if the tag is part of the channel
                                //if so then it will set the channel info
                                //to not get confused with the item title
                                if(scope.equals(ParserScope.Channel)){
                                    itemChannel.setTitle(title);
                                }else{
                                    trafficItem.setTitle(title);
                                }
                                //Log.i("title", myparser.nextText().toLowerCase());
                                break;
                            case "description":
                                String desc = myparser.nextText();

                                if(scope.equals(ParserScope.Channel)){
                                    itemChannel.setDescription(desc);
                                }else{
                                    trafficItem.setDescription(desc);
                                    Log.i("desx", trafficItem.getDescription());
                                }
                                Log.i("description", myparser.nextText().toLowerCase());
                                break;
                            case "pubDate":
                                String DatePublished = myparser.nextText();
                                try{
                                    Date date = new SimpleDateFormat("E, dd MM YYYY HH:mm:ss z").parse(DatePublished);
                                    trafficItem.setPublishDate(date);
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }
                                break;
                            default:
                                // Do nothing
                                break;
                        }

                        break;
                    case XmlPullParser.END_TAG:

                        if(myparser.getName()!=null){
                            Log.i("ENDTAG", myparser.getName());
                        }
                        //Item has ended
                        if(myparser.getName().toLowerCase().equalsIgnoreCase("item") && scope == ParserScope.Item){
                            //Removes HTML Tags from description
                            trafficItem.setDescription(trafficItem.getDescription().replaceAll("<br />", "\\\n"));
                            itemChannel.addItemList(trafficItem);

                            //Reset
                            trafficItem = new Item();
                            scope = ParserScope.Channel;

                        }
                        // Save the item to a list created up at the top
                        // clear the item
                        break;
                    default:
                        if(myparser.getName() != null){
                            Log.i("check:", myparser.getName());
                        }
                        break;
                }
                event = myparser.next();
            }
        }catch (XmlPullParserException e){
            Log.i("error", e.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }




import org.me.gcu.traffic_application.models.Item;
import org.me.gcu.traffic_application.models.ItemChannel;
import org.w3c.dom.Text;
import org.xmlpull.v1.XmlPullParserException;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    private TextView dataDisplay;
    private String result;
    private Button startButton;
    private TextView title;
    private TextView description;
    private TextView posted;

    LinearLayout layout;

    // Traffic Scotland URLs
    //private String urlSource = "https://trafficscotland.org/rss/feeds/roadworks.aspx";
    //private String urlSource = "https://trafficscotland.org/rss/feeds/plannedroadworks.aspx";
    private String urlSource = "https://trafficscotland.org/rss/feeds/roadworks.aspx";
    private HandleXml obj;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //this.context=this;
        ListView listView =(ListView)findViewById(R.id.listViews);

        title = (TextView)findViewById(R.id.title);
        startButton = (Button)findViewById(R.id.startButton);
        startButton.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        obj = new HandleXml(urlSource);

        try {
            obj.fetchXml();
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        }



    }
}
